ws = { " " | "\t" | NEWLINE }
WHITESPACE = _{ ws }
COMMENT = @{ doc_comment }

doc_comment = @{ "///" ~ (!"\n" ~ ANY)* }

file = _{ SOI ~ (import | data | enum_ | service)* ~ EOI }

import = { attributes? ~ "import" ~ path ~ ";" }
data = { attributes? ~ "data" ~ ident ~ "{" ~ property* ~ "}" ~ ";" }
service = { attributes? ~ "service" ~ ident ~ "{" ~ (handler|function|event|depends)* ~ "};" }

enum_ = { attributes? ~ "enum" ~ ident ~ "{" ~ enum_value+ ~ "}" ~ ";" }

property = { attributes? ~ ident ~ ":" ~ typ ~ "," }

enum_value = { attributes? ~ ident ~ ("=" ~ number)? ~ "," }

handler = { attributes? ~ "handles" ~ ident ~ "(" ~ arguments? ~ ")" ~ ("->" ~ typ)? ~ ";" }
function = { attributes? ~ "fn" ~ ident ~ "(" ~ arguments? ~ ")" ~ ("->" ~ typ)? ~ ";" }
event = { attributes? ~ "event" ~ ident ~ "(" ~ arguments? ~ ")" ~ ";" }
depends = { attributes? ~ "depends" ~ "on" ~ path ~ ";" }

arguments = _{ (argument ~ ",")* ~ argument }
argument = { attributes? ~ ident ~ ":" ~ typ }

typ = { ("list" ~ "of" ~ typename | number ~ "of" ~ typename | typename) }
typename = _{ path }
// TODO: maybe add proper generic support one day
//typ = @{ path ~ (ws* ~ "<" ~ ws* ~ typ ~ (ws* ~ "," ~ ws* ~ typ)* ~ ws* ~ ">")? }
path = @{ ident ~ ("::" ~ ident)* }
ident = @{ ASCII_ALPHA_UNDER ~ ASCII_ALPHANUMERIC_UNDER* }

attributes = { "#[" ~ (attribute ~ ",")* ~ attribute ~ "]" }
attribute = { path ~ ("(" ~ attr_arguments ~ ")")? }

attr_arguments = _{ (attr_argument ~ ",")* ~ attr_argument }
attr_argument = { path ~ ("=" ~ string)? }

number = { digit+ }
digit = _{ '0'..'9' }
string = ${ quote ~ chars ~ quote }
chars = { char* }
char = _{
!("\"" | "\\") ~ ANY
| "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
}
quote = _{ "\"" }

ASCII_ALPHA_UNDER = @{ ASCII_ALPHA | "_" }
ASCII_ALPHANUMERIC_UNDER = @{ ASCII_ALPHANUMERIC | "_" }
